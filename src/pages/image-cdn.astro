---
import ContextAlert from '../components/ContextAlert.astro';
import Diff from '../components/Diff.astro';
import Markdown from '../components/Markdown.astro';
import Layout from '../layouts/Layout.astro';
import { getNetlifyContext } from '../utils';

// Define the type of context without 'undefined'
type ContextType = 'dev' | 'prod' | 'staging';

// Get the context and handle undefined by providing a default
function getSafeNetlifyContext(): ContextType {
  const ctx = getNetlifyContext();
  return ctx !== undefined ? ctx as ContextType : 'prod'; // 'prod' or other default context
}

const contextValue: ContextType = getSafeNetlifyContext();
const forceWebP = contextValue === 'dev';

const sampleImage = '/images/placeholder.jpg';
const sampleImageSrcSet: string = [640, 1280, 2048]
  .map((size) => {
    return `/.netlify/images?url=${sampleImage}&w=${size}${forceWebP ? '&fm=webp' : ''} ${size}w`;
  })
  .join(', ');

const sizes: string = '(max-width: 1024px) 100vw, 1024px';

const astroImageSnippet = `...`;
const originalVsCdnSnippet = `...`;
const devModeWarning = `...`;
---
<Layout title="Image CDN">
  <div class="flex flex-col gap-12 sm:gap-16">
    <section>
      <ContextAlert
        addedChecksFunction={(ctx: ContextType) => {
          return ctx === 'dev' ? devModeWarning : null;
        }}
        class="mb-8"
      />
      <h1>Image CDN</h1>
    </section>
    <section>
      <Markdown content={astroImageSnippet} class="mb-8" />
      <figure>
        <!-- Figure content and placeholder text -->
        <figcaption class="mt-2 text-sm italic">
          <!-- Optional Placeholder Text -->
        </figcaption>
      </figure>
    </section>
    <section>
      <Markdown content={originalVsCdnSnippet} class="mb-8" />
      <Diff class="border-2 border-white rounded-lg image-diff aspect-3/2">
        <Fragment slot="item-1">
          <div>
            <div class="relative">
              <img src={sampleImage} alt="Placeholder" />
            </div>
          </div>
        </Fragment>
        <Fragment slot="item-2">
          <div>
            <div class="relative">
              <img srcset={sampleImageSrcSet} alt="Placeholder" />
            </div>
          </div>
        </Fragment>
      </Diff>
    </section>
  </div>
</Layout>

<script>
    const images = document.querySelectorAll<HTMLImageElement>('.image-diff img');

    images.forEach((image) => {
        if (image.complete) {
            showImageSize(image);
        } else {
            image.addEventListener('load', () => {
                showImageSize(image);
            });
        }
    });

    function showImageSize(image: HTMLImageElement) {
        const imageEntry = window?.performance?.getEntriesByName(image.currentSrc)?.[0] as PerformanceResourceTiming;
        if (imageEntry && imageEntry.encodedBodySize) {
            const imageOverlay = image.previousElementSibling as HTMLElement | null;
            if (imageOverlay) {
                imageOverlay.classList.remove('hidden');
                imageOverlay.textContent = `Size: ${Math.ceil(imageEntry.encodedBodySize / 1024)}KB`;
            }
        }
    }
</script>